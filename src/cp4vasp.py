# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cp4vasp
else:
    import _cp4vasp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class ClassInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cp4vasp.ClassInterface_swiginit(self, _cp4vasp.new_ClassInterface())

    def getClassName(self):
        return _cp4vasp.ClassInterface_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_ClassInterface

# Register ClassInterface in _cp4vasp:
_cp4vasp.ClassInterface_swigregister(ClassInterface)


def getAtomtypesRecordHash(s):
    return _cp4vasp.getAtomtypesRecordHash(s)
class AtomtypesRecord(ClassInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        return _cp4vasp.AtomtypesRecord_getClassName(self)

    def __init__(self):
        _cp4vasp.AtomtypesRecord_swiginit(self, _cp4vasp.new_AtomtypesRecord())
    __swig_destroy__ = _cp4vasp.delete_AtomtypesRecord
    hash = property(_cp4vasp.AtomtypesRecord_hash_get, _cp4vasp.AtomtypesRecord_hash_set)
    atomspertype = property(_cp4vasp.AtomtypesRecord_atomspertype_get, _cp4vasp.AtomtypesRecord_atomspertype_set)
    mass = property(_cp4vasp.AtomtypesRecord_mass_get, _cp4vasp.AtomtypesRecord_mass_set)
    valence = property(_cp4vasp.AtomtypesRecord_valence_get, _cp4vasp.AtomtypesRecord_valence_set)
    radius = property(_cp4vasp.AtomtypesRecord_radius_get, _cp4vasp.AtomtypesRecord_radius_set)
    covalent = property(_cp4vasp.AtomtypesRecord_covalent_get, _cp4vasp.AtomtypesRecord_covalent_set)
    n = property(_cp4vasp.AtomtypesRecord_n_get, _cp4vasp.AtomtypesRecord_n_set)
    red = property(_cp4vasp.AtomtypesRecord_red_get, _cp4vasp.AtomtypesRecord_red_set)
    green = property(_cp4vasp.AtomtypesRecord_green_get, _cp4vasp.AtomtypesRecord_green_set)
    blue = property(_cp4vasp.AtomtypesRecord_blue_get, _cp4vasp.AtomtypesRecord_blue_set)
    hidden = property(_cp4vasp.AtomtypesRecord_hidden_get, _cp4vasp.AtomtypesRecord_hidden_set)
    selected = property(_cp4vasp.AtomtypesRecord_selected_get, _cp4vasp.AtomtypesRecord_selected_set)

    def getElement(self):
        return _cp4vasp.AtomtypesRecord_getElement(self)

    def setElement(self, s):
        return _cp4vasp.AtomtypesRecord_setElement(self, s)

    def getPPType(self):
        return _cp4vasp.AtomtypesRecord_getPPType(self)

    def getPPSpecie(self):
        return _cp4vasp.AtomtypesRecord_getPPSpecie(self)

    def getPPVersion(self):
        return _cp4vasp.AtomtypesRecord_getPPVersion(self)

    def getPseudopotential(self):
        return _cp4vasp.AtomtypesRecord_getPseudopotential(self)

    def setPPType(self, s):
        return _cp4vasp.AtomtypesRecord_setPPType(self, s)

    def setPPSpecie(self, s):
        return _cp4vasp.AtomtypesRecord_setPPSpecie(self, s)

    def setPPVersion(self, s):
        return _cp4vasp.AtomtypesRecord_setPPVersion(self, s)

    def setPseudopotential(self, s):
        return _cp4vasp.AtomtypesRecord_setPseudopotential(self, s)

    def clean(self):
        return _cp4vasp.AtomtypesRecord_clean(self)

    def setAtomtypesRecord(self, a):
        return _cp4vasp.AtomtypesRecord_setAtomtypesRecord(self, a)

    def clone(self):
        return _cp4vasp.AtomtypesRecord_clone(self)

# Register AtomtypesRecord in _cp4vasp:
_cp4vasp.AtomtypesRecord_swigregister(AtomtypesRecord)

class AtomInfo(ClassInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        return _cp4vasp.AtomInfo_getClassName(self)
    types = property(_cp4vasp.AtomInfo_types_get)
    allocation_step = property(_cp4vasp.AtomInfo_allocation_step_get)

    def __init__(self, alloc=16):
        _cp4vasp.AtomInfo_swiginit(self, _cp4vasp.new_AtomInfo(alloc))
    __swig_destroy__ = _cp4vasp.delete_AtomInfo

    def append(self, r):
        return _cp4vasp.AtomInfo_append(self, r)

    def realloc(self, alloc):
        return _cp4vasp.AtomInfo_realloc(self, alloc)

    def allocate(self, n):
        return _cp4vasp.AtomInfo_allocate(self, n)

    def getRecord(self, i):
        return _cp4vasp.AtomInfo_getRecord(self, i)

    def setRecord(self, i, value):
        return _cp4vasp.AtomInfo_setRecord(self, i, value)

    def getRecordForAtom(self, i):
        return _cp4vasp.AtomInfo_getRecordForAtom(self, i)

    def getRecordForElement(self, x):
        return _cp4vasp.AtomInfo_getRecordForElement(self, x)

    def getRecordForElementSafe(self, x, i, m):
        return _cp4vasp.AtomInfo_getRecordForElementSafe(self, x, i, m)

    def speciesIndex(self, j):
        return _cp4vasp.AtomInfo_speciesIndex(self, j)

    def getNatoms(self):
        return _cp4vasp.AtomInfo_getNatoms(self)

    def setAtomInfo(self, a):
        return _cp4vasp.AtomInfo_setAtomInfo(self, a)

    def clean(self):
        return _cp4vasp.AtomInfo_clean(self)

    def clone(self):
        return _cp4vasp.AtomInfo_clone(self)

    def delitem(self, i):
        return _cp4vasp.AtomInfo_delitem(self, i)

    def len(self):
        return _cp4vasp.AtomInfo_len(self)

    def fillAttributesWithTable(self, table):
        return _cp4vasp.AtomInfo_fillAttributesWithTable(self, table)

# Register AtomInfo in _cp4vasp:
_cp4vasp.AtomInfo_swigregister(AtomInfo)


def setvec3d(dest, x, y, z):
    return _cp4vasp.setvec3d(dest, x, y, z)

def deletevec3d(dest):
    return _cp4vasp.deletevec3d(dest)

def createmat3d(a11, a12, a13, a21, a22, a23, a31, a32, a33):
    return _cp4vasp.createmat3d(a11, a12, a13, a21, a22, a23, a31, a32, a33)

def setmat3d(dest, a11, a12, a13, a21, a22, a23, a31, a32, a33):
    return _cp4vasp.setmat3d(dest, a11, a12, a13, a21, a22, a23, a31, a32, a33)

def deletemat3d(dest):
    return _cp4vasp.deletemat3d(dest)

def getVecElement3d(dest, i):
    return _cp4vasp.getVecElement3d(dest, i)

def setVecElement3d(dest, i, value):
    return _cp4vasp.setVecElement3d(dest, i, value)

def getMatVecElement3d(dest, i):
    return _cp4vasp.getMatVecElement3d(dest, i)

def setMatVecElement3d(dest, i, value):
    return _cp4vasp.setMatVecElement3d(dest, i, value)

def getMatElement3d(dest, i, j):
    return _cp4vasp.getMatElement3d(dest, i, j)

def setMatElement3d(dest, i, j, value):
    return _cp4vasp.setMatElement3d(dest, i, j, value)

def add3d(dest, a):
    return _cp4vasp.add3d(dest, a)

def plus3d(dest, a, b):
    return _cp4vasp.plus3d(dest, a, b)

def createplus3d(a, b):
    return _cp4vasp.createplus3d(a, b)

def createplusmat3d(a, b):
    return _cp4vasp.createplusmat3d(a, b)

def sub3d(dest, a):
    return _cp4vasp.sub3d(dest, a)

def minus3d(dest, a, b):
    return _cp4vasp.minus3d(dest, a, b)

def createminus3d(a, b):
    return _cp4vasp.createminus3d(a, b)

def createminusmat3d(a, b):
    return _cp4vasp.createminusmat3d(a, b)

def neg3d(v):
    return _cp4vasp.neg3d(v)

def createneg3d(v):
    return _cp4vasp.createneg3d(v)

def createnegmat3d(v):
    return _cp4vasp.createnegmat3d(v)

def scalmul3d(dest, a):
    return _cp4vasp.scalmul3d(dest, a)

def createscalmultiply3d(v, a):
    return _cp4vasp.createscalmultiply3d(v, a)

def scaldiv3d(dest, a):
    return _cp4vasp.scaldiv3d(dest, a)

def createscaldivide3d(dest, a):
    return _cp4vasp.createscaldivide3d(dest, a)

def copy3d(dest, a):
    return _cp4vasp.copy3d(dest, a)

def clone3d(a):
    return _cp4vasp.clone3d(a)

def copymat3d(dest, a):
    return _cp4vasp.copymat3d(dest, a)

def clonemat3d(a):
    return _cp4vasp.clonemat3d(a)

def veclength3d(dest):
    return _cp4vasp.veclength3d(dest)

def normalize3d(dest):
    return _cp4vasp.normalize3d(dest)

def scalprod3d(a, b):
    return _cp4vasp.scalprod3d(a, b)

def crossprod3d(dest, a, b):
    return _cp4vasp.crossprod3d(dest, a, b)

def createcrossprod3d(a, b):
    return _cp4vasp.createcrossprod3d(a, b)

def createmultiplymatscal3d(a, v):
    return _cp4vasp.createmultiplymatscal3d(a, v)

def createmultiplymatvec3d(a, v):
    return _cp4vasp.createmultiplymatvec3d(a, v)

def multiplymatvec3d(dest, a, v):
    return _cp4vasp.multiplymatvec3d(dest, a, v)

def mulmatvec3d(a, v):
    return _cp4vasp.mulmatvec3d(a, v)

def multiplymatmat3d(dest, a, b):
    return _cp4vasp.multiplymatmat3d(dest, a, b)

def createmultiplymatmat3d(a, b):
    return _cp4vasp.createmultiplymatmat3d(a, b)

def mulmatmat3d(a, b):
    return _cp4vasp.mulmatmat3d(a, b)

def createrotmat3d(x, y, z):
    return _cp4vasp.createrotmat3d(x, y, z)

def createrotmat3da(x, y, z, a):
    return _cp4vasp.createrotmat3da(x, y, z, a)

def identitymat3d(dest):
    return _cp4vasp.identitymat3d(dest)

def createidentitymat3d():
    return _cp4vasp.createidentitymat3d()

def zeromat3d(dest):
    return _cp4vasp.zeromat3d(dest)

def createzeromat3d():
    return _cp4vasp.createzeromat3d()

def detmat3d(dest):
    return _cp4vasp.detmat3d(dest)

def transmat3d(dest):
    return _cp4vasp.transmat3d(dest)
class FArray1D(ClassInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size=0):
        _cp4vasp.FArray1D_swiginit(self, _cp4vasp.new_FArray1D(size))

    def clear(self):
        return _cp4vasp.FArray1D_clear(self)

    def size(self):
        return _cp4vasp.FArray1D_size(self)

    def get(self, i):
        return _cp4vasp.FArray1D_get(self, i)

    def set(self, i, x):
        return _cp4vasp.FArray1D_set(self, i, x)

    def printrepr(self):
        return _cp4vasp.FArray1D_printrepr(self)

    def parseString(self, s):
        return _cp4vasp.FArray1D_parseString(self, s)

    def cloneBuff(self):
        return _cp4vasp.FArray1D_cloneBuff(self)

    def clone(self):
        return _cp4vasp.FArray1D_clone(self)

    def getMinimum(self):
        return _cp4vasp.FArray1D_getMinimum(self)

    def getMaximum(self):
        return _cp4vasp.FArray1D_getMaximum(self)

    def getAverage(self):
        return _cp4vasp.FArray1D_getAverage(self)

    def getVariance(self):
        return _cp4vasp.FArray1D_getVariance(self)

    def getSigma(self):
        return _cp4vasp.FArray1D_getSigma(self)

    def getClassName(self):
        return _cp4vasp.FArray1D_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_FArray1D

# Register FArray1D in _cp4vasp:
_cp4vasp.FArray1D_swigregister(FArray1D)

class FArray2D(ClassInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sizex=0, sizey=0):
        _cp4vasp.FArray2D_swiginit(self, _cp4vasp.new_FArray2D(sizex, sizey))

    def getMinimum(self):
        return _cp4vasp.FArray2D_getMinimum(self)

    def getMaximum(self):
        return _cp4vasp.FArray2D_getMaximum(self)

    def getAverage(self):
        return _cp4vasp.FArray2D_getAverage(self)

    def getVariance(self):
        return _cp4vasp.FArray2D_getVariance(self)

    def getSigma(self):
        return _cp4vasp.FArray2D_getSigma(self)

    def sizeX(self):
        return _cp4vasp.FArray2D_sizeX(self)

    def sizeY(self):
        return _cp4vasp.FArray2D_sizeY(self)

    def clear(self):
        return _cp4vasp.FArray2D_clear(self)

    def get(self, i, j):
        return _cp4vasp.FArray2D_get(self, i, j)

    def set(self, i, j, x):
        return _cp4vasp.FArray2D_set(self, i, j, x)

    def printrepr(self):
        return _cp4vasp.FArray2D_printrepr(self)

    def parseString(self, i, s):
        return _cp4vasp.FArray2D_parseString(self, i, s)

    def getArray(self, i):
        return _cp4vasp.FArray2D_getArray(self, i)

    def cloneBuff(self):
        return _cp4vasp.FArray2D_cloneBuff(self)

    def clone(self):
        return _cp4vasp.FArray2D_clone(self)

    def cubicInterpolation(self, n, m):
        return _cp4vasp.FArray2D_cubicInterpolation(self, n, m)

    def smear(self, sigma, n, m, u, v):
        return _cp4vasp.FArray2D_smear(self, sigma, n, m, u, v)

    def cloneVector(self, i):
        return _cp4vasp.FArray2D_cloneVector(self, i)

    def getClassName(self):
        return _cp4vasp.FArray2D_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_FArray2D

# Register FArray2D in _cp4vasp:
_cp4vasp.FArray2D_swigregister(FArray2D)


def createvec3d(*args):
    return _cp4vasp.createvec3d(*args)

def createFArray1Dsimple(node):
    return _cp4vasp.createFArray1Dsimple(node)

def createFArray2Dsimple(elem, tag, minx=0, miny=0):
    return _cp4vasp.createFArray2Dsimple(elem, tag, minx, miny)

def createFArray2DsimpleN(node, tag, minx=0, miny=0):
    return _cp4vasp.createFArray2DsimpleN(node, tag, minx, miny)

def createStructure(elem):
    return _cp4vasp.createStructure(elem)

def createStructureN(node):
    return _cp4vasp.createStructureN(node)
class Structure(ClassInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        return _cp4vasp.Structure_getClassName(self)
    scaling_flag = property(_cp4vasp.Structure_scaling_flag_get, _cp4vasp.Structure_scaling_flag_set)
    allocation_step = property(_cp4vasp.Structure_allocation_step_get, _cp4vasp.Structure_allocation_step_set)
    scaling = property(_cp4vasp.Structure_scaling_get)
    basis = property(_cp4vasp.Structure_basis_get)
    rbasis = property(_cp4vasp.Structure_rbasis_get)
    total_number_of_atoms = property(_cp4vasp.Structure_total_number_of_atoms_get)
    allocated = property(_cp4vasp.Structure_allocated_get)
    info = property(_cp4vasp.Structure_info_get)
    comment = property(_cp4vasp.Structure_comment_get, _cp4vasp.Structure_comment_set)
    coordinates = property(_cp4vasp.Structure_coordinates_get, _cp4vasp.Structure_coordinates_set)

    def __init__(self, *args):
        _cp4vasp.Structure_swiginit(self, _cp4vasp.new_Structure(*args))
    __swig_destroy__ = _cp4vasp.delete_Structure

    def correctScaling(self):
        return _cp4vasp.Structure_correctScaling(self)

    def parse(self, s):
        return _cp4vasp.Structure_parse(self, s)

    def read(self, path):
        return _cp4vasp.Structure_read(self, path)

    def write(self, path):
        return _cp4vasp.Structure_write(self, path)

    def toString(self):
        return _cp4vasp.Structure_toString(self)

    def isSelective(self):
        return _cp4vasp.Structure_isSelective(self)

    def isCarthesian(self):
        return _cp4vasp.Structure_isCarthesian(self)

    def isDirect(self):
        return _cp4vasp.Structure_isDirect(self)

    def getSelectiveDOF(self, i):
        return _cp4vasp.Structure_getSelectiveDOF(self, i)

    def setSelectiveDOF(self, i, value):
        return _cp4vasp.Structure_setSelectiveDOF(self, i, value)

    def setSelective(self, flag):
        return _cp4vasp.Structure_setSelective(self, flag)

    def updateRecipBasis(self):
        return _cp4vasp.Structure_updateRecipBasis(self)

    def getRecipBasis(self):
        return _cp4vasp.Structure_getRecipBasis(self)

    def forceConvertToCarthesian(self):
        return _cp4vasp.Structure_forceConvertToCarthesian(self)

    def forceConvertToDirect(self):
        return _cp4vasp.Structure_forceConvertToDirect(self)

    def setCarthesian(self, flag=1):
        return _cp4vasp.Structure_setCarthesian(self, flag)

    def setDirect(self, flag=1):
        return _cp4vasp.Structure_setDirect(self, flag)

    def dir2cart(self, dest, src):
        return _cp4vasp.Structure_dir2cart(self, dest, src)

    def cart2dir(self, dest, src):
        return _cp4vasp.Structure_cart2dir(self, dest, src)

    def dirVectorToUnitCell(self, dest, v):
        return _cp4vasp.Structure_dirVectorToUnitCell(self, dest, v)

    def dirVectorToCenteredUnitCell(self, dest, v):
        return _cp4vasp.Structure_dirVectorToCenteredUnitCell(self, dest, v)

    def cartVectorToUnitCell(self, dest, v):
        return _cp4vasp.Structure_cartVectorToUnitCell(self, dest, v)

    def cartVectorToCenteredUnitCell(self, dest, v):
        return _cp4vasp.Structure_cartVectorToCenteredUnitCell(self, dest, v)

    def vectorToUnitCell(self, dest, v):
        return _cp4vasp.Structure_vectorToUnitCell(self, dest, v)

    def vectorToCenteredUnitCell(self, dest, v):
        return _cp4vasp.Structure_vectorToCenteredUnitCell(self, dest, v)

    def toUnitCell(self):
        return _cp4vasp.Structure_toUnitCell(self)

    def toCenteredUnitCell(self):
        return _cp4vasp.Structure_toCenteredUnitCell(self)

    def mindistCartVectors(self, a, b):
        return _cp4vasp.Structure_mindistCartVectors(self, a, b)

    def mindistDirVectors(self, a, b):
        return _cp4vasp.Structure_mindistDirVectors(self, a, b)

    def createMindistMatrix(self):
        return _cp4vasp.Structure_createMindistMatrix(self)

    def deleteMindistMatrix(self):
        return _cp4vasp.Structure_deleteMindistMatrix(self)

    def getMindist(self, i, j):
        return _cp4vasp.Structure_getMindist(self, i, j)

    def clean(self):
        return _cp4vasp.Structure_clean(self)

    def setStructure(self, p):
        return _cp4vasp.Structure_setStructure(self, p)

    def clone(self):
        return _cp4vasp.Structure_clone(self)

    def len(self):
        return _cp4vasp.Structure_len(self)

    def getNumberOfSpecies(self):
        return _cp4vasp.Structure_getNumberOfSpecies(self)

    def getRecord(self, i):
        return _cp4vasp.Structure_getRecord(self, i)

    def get(self, i):
        return _cp4vasp.Structure_get(self, i)

    def set(self, i, x, y, z):
        return _cp4vasp.Structure_set(self, i, x, y, z)

    def allocate(self, n):
        return _cp4vasp.Structure_allocate(self, n)

    def realloc(self, alloc):
        return _cp4vasp.Structure_realloc(self, alloc)

    def append(self, x, y, z):
        return _cp4vasp.Structure_append(self, x, y, z)

    def delitem(self, i):
        return _cp4vasp.Structure_delitem(self, i)

    def setScaling(self, i, x):
        return _cp4vasp.Structure_setScaling(self, i, x)

# Register Structure in _cp4vasp:
_cp4vasp.Structure_swigregister(Structure)

class Process(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def total(self):
        return _cp4vasp.Process_total(self)

    def step(self):
        return _cp4vasp.Process_step(self)

    def status(self):
        return _cp4vasp.Process_status(self)

    def error(self):
        return _cp4vasp.Process_error(self)

    def next(self):
        return _cp4vasp.Process_next(self)
    __swig_destroy__ = _cp4vasp.delete_Process

    def __init__(self):
        _cp4vasp.Process_swiginit(self, _cp4vasp.new_Process())

# Register Process in _cp4vasp:
_cp4vasp.Process_swigregister(Process)

class ReadChgcarProcess(Process):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def next(self):
        return _cp4vasp.ReadChgcarProcess_next(self)
    __swig_destroy__ = _cp4vasp.delete_ReadChgcarProcess

# Register ReadChgcarProcess in _cp4vasp:
_cp4vasp.ReadChgcarProcess_swigregister(ReadChgcarProcess)

class ChgcarPlaneProcess(Process):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def next(self):
        return _cp4vasp.ChgcarPlaneProcess_next(self)
    __swig_destroy__ = _cp4vasp.delete_ChgcarPlaneProcess

    def getPlane(self):
        return _cp4vasp.ChgcarPlaneProcess_getPlane(self)

# Register ChgcarPlaneProcess in _cp4vasp:
_cp4vasp.ChgcarPlaneProcess_swigregister(ChgcarPlaneProcess)

class Chgcar(ClassInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    plane_minimum = property(_cp4vasp.Chgcar_plane_minimum_get, _cp4vasp.Chgcar_plane_minimum_set)
    plane_maximum = property(_cp4vasp.Chgcar_plane_maximum_get, _cp4vasp.Chgcar_plane_maximum_set)
    plane_average = property(_cp4vasp.Chgcar_plane_average_get, _cp4vasp.Chgcar_plane_average_set)
    plane_variance = property(_cp4vasp.Chgcar_plane_variance_get, _cp4vasp.Chgcar_plane_variance_set)

    def getClassName(self):
        return _cp4vasp.Chgcar_getClassName(self)
    structure = property(_cp4vasp.Chgcar_structure_get, _cp4vasp.Chgcar_structure_set)
    nx = property(_cp4vasp.Chgcar_nx_get, _cp4vasp.Chgcar_nx_set)
    ny = property(_cp4vasp.Chgcar_ny_get, _cp4vasp.Chgcar_ny_set)
    nz = property(_cp4vasp.Chgcar_nz_get, _cp4vasp.Chgcar_nz_set)
    data = property(_cp4vasp.Chgcar_data_get, _cp4vasp.Chgcar_data_set)

    def __init__(self):
        _cp4vasp.Chgcar_swiginit(self, _cp4vasp.new_Chgcar())
    __swig_destroy__ = _cp4vasp.delete_Chgcar

    def subtractChgcar(self, c):
        return _cp4vasp.Chgcar_subtractChgcar(self, c)

    def calculateStatistics(self):
        return _cp4vasp.Chgcar_calculateStatistics(self)

    def getMinimum(self):
        return _cp4vasp.Chgcar_getMinimum(self)

    def getMaximum(self):
        return _cp4vasp.Chgcar_getMaximum(self)

    def getAverage(self):
        return _cp4vasp.Chgcar_getAverage(self)

    def getVariance(self):
        return _cp4vasp.Chgcar_getVariance(self)

    def getSigma(self):
        return _cp4vasp.Chgcar_getSigma(self)

    def clean(self):
        return _cp4vasp.Chgcar_clean(self)

    def read(self, path):
        return _cp4vasp.Chgcar_read(self, path)

    def createReadProcess(self, path):
        return _cp4vasp.Chgcar_createReadProcess(self, path)

    def write(self, path):
        return _cp4vasp.Chgcar_write(self, path)

    def get(self, i, j, k):
        return _cp4vasp.Chgcar_get(self, i, j, k)

    def getRaw(self, i, j, k):
        return _cp4vasp.Chgcar_getRaw(self, i, j, k)

    def set(self, i, j, k, val):
        return _cp4vasp.Chgcar_set(self, i, j, k, val)

    def setRaw(self, i, j, k, val):
        return _cp4vasp.Chgcar_setRaw(self, i, j, k, val)

    def getDirGrad(self, dest, i, j, k):
        return _cp4vasp.Chgcar_getDirGrad(self, dest, i, j, k)

    def getGrad(self, dest, i, j, k):
        return _cp4vasp.Chgcar_getGrad(self, dest, i, j, k)

    def downSampleByFactors(self, i, j, k):
        return _cp4vasp.Chgcar_downSampleByFactors(self, i, j, k)

    def sumElectrons(self):
        return _cp4vasp.Chgcar_sumElectrons(self)

    def gaussianSmearingX(self, sigma, limit=0.01):
        return _cp4vasp.Chgcar_gaussianSmearingX(self, sigma, limit)

    def gaussianSmearingY(self, sigma, limit=0.01):
        return _cp4vasp.Chgcar_gaussianSmearingY(self, sigma, limit)

    def gaussianSmearingZ(self, sigma, limit=0.01):
        return _cp4vasp.Chgcar_gaussianSmearingZ(self, sigma, limit)

    def clone(self):
        return _cp4vasp.Chgcar_clone(self)

    def setChgcar(self, c):
        return _cp4vasp.Chgcar_setChgcar(self, c)

    def calculatePlaneStatisticsX(self, n):
        return _cp4vasp.Chgcar_calculatePlaneStatisticsX(self, n)

    def calculatePlaneStatisticsY(self, n):
        return _cp4vasp.Chgcar_calculatePlaneStatisticsY(self, n)

    def calculatePlaneStatisticsZ(self, n):
        return _cp4vasp.Chgcar_calculatePlaneStatisticsZ(self, n)

    def searchMinPlaneX(self):
        return _cp4vasp.Chgcar_searchMinPlaneX(self)

    def searchMinPlaneY(self):
        return _cp4vasp.Chgcar_searchMinPlaneY(self)

    def searchMinPlaneZ(self):
        return _cp4vasp.Chgcar_searchMinPlaneZ(self)

    def getPlaneX(self, n):
        return _cp4vasp.Chgcar_getPlaneX(self, n)

    def getPlaneY(self, n):
        return _cp4vasp.Chgcar_getPlaneY(self, n)

    def getPlaneZ(self, n):
        return _cp4vasp.Chgcar_getPlaneZ(self, n)

    def createSmoothPlaneProcessX(self, n, sigmax, sigmay, sigmaz, limit=0.01):
        return _cp4vasp.Chgcar_createSmoothPlaneProcessX(self, n, sigmax, sigmay, sigmaz, limit)

    def createSmoothPlaneProcessY(self, n, sigmax, sigmay, sigmaz, limit=0.01):
        return _cp4vasp.Chgcar_createSmoothPlaneProcessY(self, n, sigmax, sigmay, sigmaz, limit)

    def createSmoothPlaneProcessZ(self, n, sigmax, sigmay, sigmaz, limit=0.01):
        return _cp4vasp.Chgcar_createSmoothPlaneProcessZ(self, n, sigmax, sigmay, sigmaz, limit)

    def createCCPlaneX(self, val, n=-1, delta=-1):
        return _cp4vasp.Chgcar_createCCPlaneX(self, val, n, delta)

    def createCCPlaneY(self, val, n=-1, delta=-1):
        return _cp4vasp.Chgcar_createCCPlaneY(self, val, n, delta)

    def createCCPlaneZ(self, val, n=-1, delta=-1):
        return _cp4vasp.Chgcar_createCCPlaneZ(self, val, n, delta)

    def createCCPlaneCubicX(self, val, n=-1, delta=-1):
        return _cp4vasp.Chgcar_createCCPlaneCubicX(self, val, n, delta)

    def createCCPlaneCubicY(self, val, n=-1, delta=-1):
        return _cp4vasp.Chgcar_createCCPlaneCubicY(self, val, n, delta)

    def createCCPlaneCubicZ(self, val, n=-1, delta=-1):
        return _cp4vasp.Chgcar_createCCPlaneCubicZ(self, val, n, delta)

# Register Chgcar in _cp4vasp:
_cp4vasp.Chgcar_swigregister(Chgcar)

class ChgcarSmear(ClassInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cp4vasp.ChgcarSmear_swiginit(self, _cp4vasp.new_ChgcarSmear())

    def getClassName(self):
        return _cp4vasp.ChgcarSmear_getClassName(self)

    def setChgcar(self, c):
        return _cp4vasp.ChgcarSmear_setChgcar(self, c)

    def get(self, i, j, k):
        return _cp4vasp.ChgcarSmear_get(self, i, j, k)
    __swig_destroy__ = _cp4vasp.delete_ChgcarSmear

# Register ChgcarSmear in _cp4vasp:
_cp4vasp.ChgcarSmear_swigregister(ChgcarSmear)

class GaussianChgcarSmear(ChgcarSmear):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lx = property(_cp4vasp.GaussianChgcarSmear_lx_get, _cp4vasp.GaussianChgcarSmear_lx_set)
    ly = property(_cp4vasp.GaussianChgcarSmear_ly_get, _cp4vasp.GaussianChgcarSmear_ly_set)
    lz = property(_cp4vasp.GaussianChgcarSmear_lz_get, _cp4vasp.GaussianChgcarSmear_lz_set)
    dir = property(_cp4vasp.GaussianChgcarSmear_dir_get, _cp4vasp.GaussianChgcarSmear_dir_set)
    horizontal_sigma = property(_cp4vasp.GaussianChgcarSmear_horizontal_sigma_get, _cp4vasp.GaussianChgcarSmear_horizontal_sigma_set)
    vertical_sigma = property(_cp4vasp.GaussianChgcarSmear_vertical_sigma_get, _cp4vasp.GaussianChgcarSmear_vertical_sigma_set)

    def __init__(self):
        _cp4vasp.GaussianChgcarSmear_swiginit(self, _cp4vasp.new_GaussianChgcarSmear())

    def getClassName(self):
        return _cp4vasp.GaussianChgcarSmear_getClassName(self)

    def setChgcar(self, c):
        return _cp4vasp.GaussianChgcarSmear_setChgcar(self, c)

    def get(self, i, j, k):
        return _cp4vasp.GaussianChgcarSmear_get(self, i, j, k)
    __swig_destroy__ = _cp4vasp.delete_GaussianChgcarSmear

# Register GaussianChgcarSmear in _cp4vasp:
_cp4vasp.GaussianChgcarSmear_swigregister(GaussianChgcarSmear)

class ChgcarSmearProcess(Process):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c, s, pstep=10):
        _cp4vasp.ChgcarSmearProcess_swiginit(self, _cp4vasp.new_ChgcarSmearProcess(c, s, pstep))

    def next(self):
        return _cp4vasp.ChgcarSmearProcess_next(self)

    def get(self):
        return _cp4vasp.ChgcarSmearProcess_get(self)

    def getClassName(self):
        return _cp4vasp.ChgcarSmearProcess_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_ChgcarSmearProcess

# Register ChgcarSmearProcess in _cp4vasp:
_cp4vasp.ChgcarSmearProcess_swigregister(ChgcarSmearProcess)

class ChgcarSmearPlaneProcess(Process):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c, s, nplane, dir, pstep=10):
        _cp4vasp.ChgcarSmearPlaneProcess_swiginit(self, _cp4vasp.new_ChgcarSmearPlaneProcess(c, s, nplane, dir, pstep))

    def planeName(self, *args):
        return _cp4vasp.ChgcarSmearPlaneProcess_planeName(self, *args)

    def next(self):
        return _cp4vasp.ChgcarSmearPlaneProcess_next(self)
    __swig_destroy__ = _cp4vasp.delete_ChgcarSmearPlaneProcess

    def getClassName(self):
        return _cp4vasp.ChgcarSmearPlaneProcess_getClassName(self)

    def getPlane(self):
        return _cp4vasp.ChgcarSmearPlaneProcess_getPlane(self)

# Register ChgcarSmearPlaneProcess in _cp4vasp:
_cp4vasp.ChgcarSmearPlaneProcess_swigregister(ChgcarSmearPlaneProcess)

class STMSearchProcess(Process):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_cp4vasp.STMSearchProcess_mode_get, _cp4vasp.STMSearchProcess_mode_set)
    pstep = property(_cp4vasp.STMSearchProcess_pstep_get, _cp4vasp.STMSearchProcess_pstep_set)
    delta = property(_cp4vasp.STMSearchProcess_delta_get, _cp4vasp.STMSearchProcess_delta_set)
    n0 = property(_cp4vasp.STMSearchProcess_n0_get, _cp4vasp.STMSearchProcess_n0_set)
    autoplane = property(_cp4vasp.STMSearchProcess_autoplane_get, _cp4vasp.STMSearchProcess_autoplane_set)
    value = property(_cp4vasp.STMSearchProcess_value_get, _cp4vasp.STMSearchProcess_value_set)

    def __init__(self, c, val, s=None, n0=-1, dir=2, delta=-1, pstep=10, mode=0):
        _cp4vasp.STMSearchProcess_swiginit(self, _cp4vasp.new_STMSearchProcess(c, val, s, n0, dir, delta, pstep, mode))

    def update(self):
        return _cp4vasp.STMSearchProcess_update(self)

    def getDir(self):
        return _cp4vasp.STMSearchProcess_getDir(self)

    def setDir(self, d):
        return _cp4vasp.STMSearchProcess_setDir(self, d)

    def setChgcar(self, c):
        return _cp4vasp.STMSearchProcess_setChgcar(self, c)

    def setSmear(self, s):
        return _cp4vasp.STMSearchProcess_setSmear(self, s)

    def searchFast(self, I, J):
        return _cp4vasp.STMSearchProcess_searchFast(self, I, J)

    def searchSlow(self, I, J):
        return _cp4vasp.STMSearchProcess_searchSlow(self, I, J)

    def getHeightFast(self, I, J):
        return _cp4vasp.STMSearchProcess_getHeightFast(self, I, J)

    def getHeightSlow(self, I, J):
        return _cp4vasp.STMSearchProcess_getHeightSlow(self, I, J)

    def getHeightFastCubic(self, I, J):
        return _cp4vasp.STMSearchProcess_getHeightFastCubic(self, I, J)

    def getHeightSlowCubic(self, I, J):
        return _cp4vasp.STMSearchProcess_getHeightSlowCubic(self, I, J)

    def getClassName(self):
        return _cp4vasp.STMSearchProcess_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_STMSearchProcess

    def next(self):
        return _cp4vasp.STMSearchProcess_next(self)

    def processAll(self):
        return _cp4vasp.STMSearchProcess_processAll(self)

    def getPlane(self):
        return _cp4vasp.STMSearchProcess_getPlane(self)

# Register STMSearchProcess in _cp4vasp:
_cp4vasp.STMSearchProcess_swigregister(STMSearchProcess)


def VisInit():
    return _cp4vasp.VisInit()

def VisMainLoop():
    return _cp4vasp.VisMainLoop()

def VisMainLoopInThread():
    return _cp4vasp.VisMainLoopInThread()

def VisSync():
    return _cp4vasp.VisSync()

def VisCheck():
    return _cp4vasp.VisCheck()

def checkThreadsSupport():
    return _cp4vasp.checkThreadsSupport()
class VisBackEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create():
        return _cp4vasp.VisBackEvent_create()
    type = property(_cp4vasp.VisBackEvent_type_get, _cp4vasp.VisBackEvent_type_set)
    index = property(_cp4vasp.VisBackEvent_index_get, _cp4vasp.VisBackEvent_index_set)
    nx = property(_cp4vasp.VisBackEvent_nx_get, _cp4vasp.VisBackEvent_nx_set)
    ny = property(_cp4vasp.VisBackEvent_ny_get, _cp4vasp.VisBackEvent_ny_set)
    nz = property(_cp4vasp.VisBackEvent_nz_get, _cp4vasp.VisBackEvent_nz_set)

    def getStructureDrawer(self):
        return _cp4vasp.VisBackEvent_getStructureDrawer(self)

    def getWindow(self):
        return _cp4vasp.VisBackEvent_getWindow(self)
    __swig_destroy__ = _cp4vasp.delete_VisBackEvent

# Register VisBackEvent in _cp4vasp:
_cp4vasp.VisBackEvent_swigregister(VisBackEvent)
cvar = _cp4vasp.cvar
BE_NONE = cvar.BE_NONE
BE_SELECTED = cvar.BE_SELECTED
BE_DESELECTED = cvar.BE_DESELECTED
BE_WIN_ACTIVATE = cvar.BE_WIN_ACTIVATE
BE_WIN_DEACTIVATE = cvar.BE_WIN_DEACTIVATE
BE_WIN_SHOW = cvar.BE_WIN_SHOW
BE_WIN_HIDE = cvar.BE_WIN_HIDE
BE_WIN_CLOSE = cvar.BE_WIN_CLOSE

def VisBackEvent_create():
    return _cp4vasp.VisBackEvent_create()

class VisBackEventQueue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def get():
        return _cp4vasp.VisBackEventQueue_get()

    def __init__(self):
        _cp4vasp.VisBackEventQueue_swiginit(self, _cp4vasp.new_VisBackEventQueue())

    def current(self):
        return _cp4vasp.VisBackEventQueue_current(self)

    def last(self):
        return _cp4vasp.VisBackEventQueue_last(self)

    def pop(self):
        return _cp4vasp.VisBackEventQueue_pop(self)

    def append(self, e):
        return _cp4vasp.VisBackEventQueue_append(self, e)

    def prepend(self, e):
        return _cp4vasp.VisBackEventQueue_prepend(self, e)
    __swig_destroy__ = _cp4vasp.delete_VisBackEventQueue

# Register VisBackEventQueue in _cp4vasp:
_cp4vasp.VisBackEventQueue_swigregister(VisBackEventQueue)

def VisBackEventQueue_get():
    return _cp4vasp.VisBackEventQueue_get()

class VisWindow(ClassInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mouse_x = property(_cp4vasp.VisWindow_mouse_x_get, _cp4vasp.VisWindow_mouse_x_set)
    mouse_y = property(_cp4vasp.VisWindow_mouse_y_get, _cp4vasp.VisWindow_mouse_y_set)
    mouse_button1 = property(_cp4vasp.VisWindow_mouse_button1_get, _cp4vasp.VisWindow_mouse_button1_set)
    mouse_button2 = property(_cp4vasp.VisWindow_mouse_button2_get, _cp4vasp.VisWindow_mouse_button2_set)
    mouse_button3 = property(_cp4vasp.VisWindow_mouse_button3_get, _cp4vasp.VisWindow_mouse_button3_set)
    mouse_button = property(_cp4vasp.VisWindow_mouse_button_get, _cp4vasp.VisWindow_mouse_button_set)
    key = property(_cp4vasp.VisWindow_key_get, _cp4vasp.VisWindow_key_set)

    def getClassName(self):
        return _cp4vasp.VisWindow_getClassName(self)
    x = property(_cp4vasp.VisWindow_x_get)
    y = property(_cp4vasp.VisWindow_y_get)
    w = property(_cp4vasp.VisWindow_w_get)
    h = property(_cp4vasp.VisWindow_h_get)

    def __init__(self, x, y, w, h, title):
        _cp4vasp.VisWindow_swiginit(self, _cp4vasp.new_VisWindow(x, y, w, h, title))
    __swig_destroy__ = _cp4vasp.delete_VisWindow

    @staticmethod
    def getFirstWindow():
        return _cp4vasp.VisWindow_getFirstWindow()

    @staticmethod
    def getLastWindow():
        return _cp4vasp.VisWindow_getLastWindow()

    @staticmethod
    def getWindow(n):
        return _cp4vasp.VisWindow_getWindow(n)

    @staticmethod
    def getWindowByOutput(w):
        return _cp4vasp.VisWindow_getWindowByOutput(w)

    @staticmethod
    def windowsCount():
        return _cp4vasp.VisWindow_windowsCount()

    @staticmethod
    def getWindowIndex(w):
        return _cp4vasp.VisWindow_getWindowIndex(w)

    @staticmethod
    def deleteAllWindows():
        return _cp4vasp.VisWindow_deleteAllWindows()

    def getNextWindow(self):
        return _cp4vasp.VisWindow_getNextWindow(self)

    def getPreviousWindow(self):
        return _cp4vasp.VisWindow_getPreviousWindow(self)

    @staticmethod
    def deleteWindow(n):
        return _cp4vasp.VisWindow_deleteWindow(n)

    def getTitle(self):
        return _cp4vasp.VisWindow_getTitle(self)

    def setTitle(self, title):
        return _cp4vasp.VisWindow_setTitle(self, title)

    def position(self, x, y):
        return _cp4vasp.VisWindow_position(self, x, y)

    def size(self, x, y):
        return _cp4vasp.VisWindow_size(self, x, y)

    def resize(self, x, y, w, h):
        return _cp4vasp.VisWindow_resize(self, x, y, w, h)

    def show(self):
        return _cp4vasp.VisWindow_show(self)

    def hide(self):
        return _cp4vasp.VisWindow_hide(self)

    def redraw(self):
        return _cp4vasp.VisWindow_redraw(self)

    def setDrawer(self, d):
        return _cp4vasp.VisWindow_setDrawer(self, d)

    def getDrawer(self):
        return _cp4vasp.VisWindow_getDrawer(self)

    def saveScreenshot(self, path):
        return _cp4vasp.VisWindow_saveScreenshot(self, path)

# Register VisWindow in _cp4vasp:
_cp4vasp.VisWindow_swigregister(VisWindow)

def VisWindow_getFirstWindow():
    return _cp4vasp.VisWindow_getFirstWindow()

def VisWindow_getLastWindow():
    return _cp4vasp.VisWindow_getLastWindow()

def VisWindow_getWindow(n):
    return _cp4vasp.VisWindow_getWindow(n)

def VisWindow_getWindowByOutput(w):
    return _cp4vasp.VisWindow_getWindowByOutput(w)

def VisWindow_windowsCount():
    return _cp4vasp.VisWindow_windowsCount()

def VisWindow_getWindowIndex(w):
    return _cp4vasp.VisWindow_getWindowIndex(w)

def VisWindow_deleteAllWindows():
    return _cp4vasp.VisWindow_deleteAllWindows()

def VisWindow_deleteWindow(n):
    return _cp4vasp.VisWindow_deleteWindow(n)

class VisDrawer(ClassInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cp4vasp.VisDrawer_swiginit(self, _cp4vasp.new_VisDrawer())

    def getClassName(self):
        return _cp4vasp.VisDrawer_getClassName(self)

    def getWindow(self):
        return _cp4vasp.VisDrawer_getWindow(self)

    def getPrevious(self):
        return _cp4vasp.VisDrawer_getPrevious(self)

    def getNext(self):
        return _cp4vasp.VisDrawer_getNext(self)

    def getFirst(self):
        return _cp4vasp.VisDrawer_getFirst(self)

    def getLast(self):
        return _cp4vasp.VisDrawer_getLast(self)

    def countBefore(self):
        return _cp4vasp.VisDrawer_countBefore(self)

    def countAfter(self):
        return _cp4vasp.VisDrawer_countAfter(self)

    def count(self):
        return _cp4vasp.VisDrawer_count(self)

    def insertAfter(self, d):
        return _cp4vasp.VisDrawer_insertAfter(self, d)

    def insertBefore(self, d):
        return _cp4vasp.VisDrawer_insertBefore(self, d)

    def insertSequenceAfter(self, d):
        return _cp4vasp.VisDrawer_insertSequenceAfter(self, d)

    def insertSequenceBefore(self, d):
        return _cp4vasp.VisDrawer_insertSequenceBefore(self, d)

    def append(self, d):
        return _cp4vasp.VisDrawer_append(self, d)

    def appendSequence(self, d):
        return _cp4vasp.VisDrawer_appendSequence(self, d)
    __swig_destroy__ = _cp4vasp.delete_VisDrawer

    def getMouseX(self):
        return _cp4vasp.VisDrawer_getMouseX(self)

    def getMouseY(self):
        return _cp4vasp.VisDrawer_getMouseY(self)

    def getMouseButton(self):
        return _cp4vasp.VisDrawer_getMouseButton(self)

    def getMouseButton1(self):
        return _cp4vasp.VisDrawer_getMouseButton1(self)

    def getMouseButton2(self):
        return _cp4vasp.VisDrawer_getMouseButton2(self)

    def getMouseButton3(self):
        return _cp4vasp.VisDrawer_getMouseButton3(self)

    def getKey(self):
        return _cp4vasp.VisDrawer_getKey(self)

    def getWidth(self):
        return _cp4vasp.VisDrawer_getWidth(self)

    def getHeight(self):
        return _cp4vasp.VisDrawer_getHeight(self)

    def redraw(self):
        return _cp4vasp.VisDrawer_redraw(self)

# Register VisDrawer in _cp4vasp:
_cp4vasp.VisDrawer_swigregister(VisDrawer)

class VisNavDrawer(VisDrawer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bg_red = property(_cp4vasp.VisNavDrawer_bg_red_get)
    bg_green = property(_cp4vasp.VisNavDrawer_bg_green_get)
    bg_blue = property(_cp4vasp.VisNavDrawer_bg_blue_get)

    def __init__(self):
        _cp4vasp.VisNavDrawer_swiginit(self, _cp4vasp.new_VisNavDrawer())

    def getRotMatElement(self, i, j):
        return _cp4vasp.VisNavDrawer_getRotMatElement(self, i, j)

    def setBackground(self, red, green, blue):
        return _cp4vasp.VisNavDrawer_setBackground(self, red, green, blue)

    def setAntialiasing(self, a):
        return _cp4vasp.VisNavDrawer_setAntialiasing(self, a)

    def getAntialiasing(self):
        return _cp4vasp.VisNavDrawer_getAntialiasing(self)

    def getClassName(self):
        return _cp4vasp.VisNavDrawer_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_VisNavDrawer

    def setHome(self):
        return _cp4vasp.VisNavDrawer_setHome(self)

    def setFrontView(self):
        return _cp4vasp.VisNavDrawer_setFrontView(self)

    def setBackView(self):
        return _cp4vasp.VisNavDrawer_setBackView(self)

    def setLeftView(self):
        return _cp4vasp.VisNavDrawer_setLeftView(self)

    def setRightView(self):
        return _cp4vasp.VisNavDrawer_setRightView(self)

    def setTopView(self):
        return _cp4vasp.VisNavDrawer_setTopView(self)

    def setBottomView(self):
        return _cp4vasp.VisNavDrawer_setBottomView(self)

    def getPerspective(self):
        return _cp4vasp.VisNavDrawer_getPerspective(self)

    def setPerspective(self, flag):
        return _cp4vasp.VisNavDrawer_setPerspective(self, flag)

    def getZoom(self):
        return _cp4vasp.VisNavDrawer_getZoom(self)

    def setZoom(self, z):
        return _cp4vasp.VisNavDrawer_setZoom(self, z)

    def mulZoom(self, z):
        return _cp4vasp.VisNavDrawer_mulZoom(self, z)

# Register VisNavDrawer in _cp4vasp:
_cp4vasp.VisNavDrawer_swigregister(VisNavDrawer)


def getDefaultPrimitivesResolution():
    return _cp4vasp.getDefaultPrimitivesResolution()

def setDefaultPrimitivesResolution(r):
    return _cp4vasp.setDefaultPrimitivesResolution(r)
class VisPrimitiveDrawer(VisDrawer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    arrow_radius = property(_cp4vasp.VisPrimitiveDrawer_arrow_radius_get, _cp4vasp.VisPrimitiveDrawer_arrow_radius_set)
    arrowhead_radius = property(_cp4vasp.VisPrimitiveDrawer_arrowhead_radius_get, _cp4vasp.VisPrimitiveDrawer_arrowhead_radius_set)
    arrowhead_length = property(_cp4vasp.VisPrimitiveDrawer_arrowhead_length_get, _cp4vasp.VisPrimitiveDrawer_arrowhead_length_set)

    def __init__(self):
        _cp4vasp.VisPrimitiveDrawer_swiginit(self, _cp4vasp.new_VisPrimitiveDrawer())

    def getClassName(self):
        return _cp4vasp.VisPrimitiveDrawer_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_VisPrimitiveDrawer

    def setPrimitivesResolution(self, r):
        return _cp4vasp.VisPrimitiveDrawer_setPrimitivesResolution(self, r)

    def color(self, red, green, blue):
        return _cp4vasp.VisPrimitiveDrawer_color(self, red, green, blue)

    def sphere(self, x, y, z, radius):
        return _cp4vasp.VisPrimitiveDrawer_sphere(self, x, y, z, radius)

    def cylinder(self, x1, y1, z1, x2, y2, z2, radius):
        return _cp4vasp.VisPrimitiveDrawer_cylinder(self, x1, y1, z1, x2, y2, z2, radius)

    def cone(self, x1, y1, z1, x2, y2, z2, radius):
        return _cp4vasp.VisPrimitiveDrawer_cone(self, x1, y1, z1, x2, y2, z2, radius)

    def line(self, x1, y1, z1, x2, y2, z2):
        return _cp4vasp.VisPrimitiveDrawer_line(self, x1, y1, z1, x2, y2, z2)

    def arrow(self, x, y, z, dx, dy, dz, scale=1.0, normalize=0):
        return _cp4vasp.VisPrimitiveDrawer_arrow(self, x, y, z, dx, dy, dz, scale, normalize)

# Register VisPrimitiveDrawer in _cp4vasp:
_cp4vasp.VisPrimitiveDrawer_swigregister(VisPrimitiveDrawer)

class AtomId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cp4vasp.AtomId_swiginit(self, _cp4vasp.new_AtomId())
    atom = property(_cp4vasp.AtomId_atom_get, _cp4vasp.AtomId_atom_set)
    nx = property(_cp4vasp.AtomId_nx_get, _cp4vasp.AtomId_nx_set)
    ny = property(_cp4vasp.AtomId_ny_get, _cp4vasp.AtomId_ny_set)
    nz = property(_cp4vasp.AtomId_nz_get, _cp4vasp.AtomId_nz_set)
    __swig_destroy__ = _cp4vasp.delete_AtomId

# Register AtomId in _cp4vasp:
_cp4vasp.AtomId_swigregister(AtomId)

class VisStructureDrawer(VisPrimitiveDrawer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cell_red = property(_cp4vasp.VisStructureDrawer_cell_red_get, _cp4vasp.VisStructureDrawer_cell_red_set)
    cell_green = property(_cp4vasp.VisStructureDrawer_cell_green_get, _cp4vasp.VisStructureDrawer_cell_green_set)
    cell_blue = property(_cp4vasp.VisStructureDrawer_cell_blue_get, _cp4vasp.VisStructureDrawer_cell_blue_set)
    bond_red = property(_cp4vasp.VisStructureDrawer_bond_red_get, _cp4vasp.VisStructureDrawer_bond_red_set)
    bond_green = property(_cp4vasp.VisStructureDrawer_bond_green_get, _cp4vasp.VisStructureDrawer_bond_green_set)
    bond_blue = property(_cp4vasp.VisStructureDrawer_bond_blue_get, _cp4vasp.VisStructureDrawer_bond_blue_set)
    info = property(_cp4vasp.VisStructureDrawer_info_get)
    cell_line_width = property(_cp4vasp.VisStructureDrawer_cell_line_width_get)
    showcellflag = property(_cp4vasp.VisStructureDrawer_showcellflag_get)

    def updateStructure(self):
        return _cp4vasp.VisStructureDrawer_updateStructure(self)

    def setMultiple(self, a, b, c):
        return _cp4vasp.VisStructureDrawer_setMultiple(self, a, b, c)

    def setMultiple1(self, a):
        return _cp4vasp.VisStructureDrawer_setMultiple1(self, a)

    def setMultiple2(self, a):
        return _cp4vasp.VisStructureDrawer_setMultiple2(self, a)

    def setMultiple3(self, a):
        return _cp4vasp.VisStructureDrawer_setMultiple3(self, a)

    def getMultiple1(self):
        return _cp4vasp.VisStructureDrawer_getMultiple1(self)

    def getMultiple2(self):
        return _cp4vasp.VisStructureDrawer_getMultiple2(self)

    def getMultiple3(self):
        return _cp4vasp.VisStructureDrawer_getMultiple3(self)

    def __init__(self):
        _cp4vasp.VisStructureDrawer_swiginit(self, _cp4vasp.new_VisStructureDrawer())

    def getClassName(self):
        return _cp4vasp.VisStructureDrawer_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_VisStructureDrawer

    def switchSelectionByPick(self, x, y):
        return _cp4vasp.VisStructureDrawer_switchSelectionByPick(self, x, y)

    def setPrimitivesResolution(self, r):
        return _cp4vasp.VisStructureDrawer_setPrimitivesResolution(self, r)

    def selectObject(self, x, y, z, radius, phase=0.0):
        return _cp4vasp.VisStructureDrawer_selectObject(self, x, y, z, radius, phase)

    def fillInfo(self):
        return _cp4vasp.VisStructureDrawer_fillInfo(self)

    def setStructure(self, s):
        return _cp4vasp.VisStructureDrawer_setStructure(self, s)

    def getStructure(self):
        return _cp4vasp.VisStructureDrawer_getStructure(self)

    def getRadiusFactor(self):
        return _cp4vasp.VisStructureDrawer_getRadiusFactor(self)

    def setRadiusFactor(self, r):
        return _cp4vasp.VisStructureDrawer_setRadiusFactor(self, r)

    def getBondRadius(self):
        return _cp4vasp.VisStructureDrawer_getBondRadius(self)

    def setBondRadius(self, r):
        return _cp4vasp.VisStructureDrawer_setBondRadius(self, r)

    def getBondFactor(self):
        return _cp4vasp.VisStructureDrawer_getBondFactor(self)

    def setBondFactor(self, r):
        return _cp4vasp.VisStructureDrawer_setBondFactor(self, r)

    def showCell(self, f=1):
        return _cp4vasp.VisStructureDrawer_showCell(self, f)

    def getCellLineWidth(self):
        return _cp4vasp.VisStructureDrawer_getCellLineWidth(self)

    def setCellLineWidth(self, w):
        return _cp4vasp.VisStructureDrawer_setCellLineWidth(self, w)

    def setCellColor(self, r, g, b):
        return _cp4vasp.VisStructureDrawer_setCellColor(self, r, g, b)

    def setBondColor(self, r, g, b):
        return _cp4vasp.VisStructureDrawer_setBondColor(self, r, g, b)

    def getSelected(self, i):
        return _cp4vasp.VisStructureDrawer_getSelected(self, i)

    def getSelectedCount(self):
        return _cp4vasp.VisStructureDrawer_getSelectedCount(self)

    def appendSelected(self, atom, nx=0, ny=0, nz=0):
        return _cp4vasp.VisStructureDrawer_appendSelected(self, atom, nx, ny, nz)

    def notifySelected(self, atom, nx=0, ny=0, nz=0):
        return _cp4vasp.VisStructureDrawer_notifySelected(self, atom, nx, ny, nz)

    def notifyDeselected(self, atom, nx=0, ny=0, nz=0):
        return _cp4vasp.VisStructureDrawer_notifyDeselected(self, atom, nx, ny, nz)

    def removeSelectedAll(self):
        return _cp4vasp.VisStructureDrawer_removeSelectedAll(self)

    def removeSelectedItem(self, i):
        return _cp4vasp.VisStructureDrawer_removeSelectedItem(self, i)

    def findSelectedAtom(self, atom, nx=0, ny=0, nz=0):
        return _cp4vasp.VisStructureDrawer_findSelectedAtom(self, atom, nx, ny, nz)

    def selectAtom(self, atom, nx, ny, nz):
        return _cp4vasp.VisStructureDrawer_selectAtom(self, atom, nx, ny, nz)

    def deselectAtom(self, atom, nx, ny, nz):
        return _cp4vasp.VisStructureDrawer_deselectAtom(self, atom, nx, ny, nz)

    def switchAtomSelection(self, atom, nx, ny, nz):
        return _cp4vasp.VisStructureDrawer_switchAtomSelection(self, atom, nx, ny, nz)

# Register VisStructureDrawer in _cp4vasp:
_cp4vasp.VisStructureDrawer_swigregister(VisStructureDrawer)

class Clamp(ClassInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassName(self):
        return _cp4vasp.Clamp_getClassName(self)

    def f(self, x):
        return _cp4vasp.Clamp_f(self, x)
    __swig_destroy__ = _cp4vasp.delete_Clamp

# Register Clamp in _cp4vasp:
_cp4vasp.Clamp_swigregister(Clamp)

class ThresholdClamp(Clamp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cp4vasp.ThresholdClamp_swiginit(self, _cp4vasp.new_ThresholdClamp())
    __swig_destroy__ = _cp4vasp.delete_ThresholdClamp

# Register ThresholdClamp in _cp4vasp:
_cp4vasp.ThresholdClamp_swigregister(ThresholdClamp)

class SawtoothClamp(Clamp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cp4vasp.SawtoothClamp_swiginit(self, _cp4vasp.new_SawtoothClamp())
    __swig_destroy__ = _cp4vasp.delete_SawtoothClamp

# Register SawtoothClamp in _cp4vasp:
_cp4vasp.SawtoothClamp_swigregister(SawtoothClamp)

class CosClamp(Clamp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cp4vasp.CosClamp_swiginit(self, _cp4vasp.new_CosClamp())
    __swig_destroy__ = _cp4vasp.delete_CosClamp

# Register CosClamp in _cp4vasp:
_cp4vasp.CosClamp_swigregister(CosClamp)

class WaveClamp(Clamp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cp4vasp.WaveClamp_swiginit(self, _cp4vasp.new_WaveClamp())
    __swig_destroy__ = _cp4vasp.delete_WaveClamp

# Register WaveClamp in _cp4vasp:
_cp4vasp.WaveClamp_swigregister(WaveClamp)

class AtanClamp(Clamp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cp4vasp.AtanClamp_swiginit(self, _cp4vasp.new_AtanClamp())
    __swig_destroy__ = _cp4vasp.delete_AtanClamp

# Register AtanClamp in _cp4vasp:
_cp4vasp.AtanClamp_swigregister(AtanClamp)

class FermiClamp(Clamp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cp4vasp.FermiClamp_swiginit(self, _cp4vasp.new_FermiClamp())
    __swig_destroy__ = _cp4vasp.delete_FermiClamp

# Register FermiClamp in _cp4vasp:
_cp4vasp.FermiClamp_swigregister(FermiClamp)

class ColorGradient(ClassInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    color = property(_cp4vasp.ColorGradient_color_get, _cp4vasp.ColorGradient_color_set)

    def getClassName(self):
        return _cp4vasp.ColorGradient_getClassName(self)

    def f(self, x):
        return _cp4vasp.ColorGradient_f(self, x)

    def glcolor(self, x):
        return _cp4vasp.ColorGradient_glcolor(self, x)
    __swig_destroy__ = _cp4vasp.delete_ColorGradient

# Register ColorGradient in _cp4vasp:
_cp4vasp.ColorGradient_swigregister(ColorGradient)

class GrayColorGradient(ColorGradient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        return _cp4vasp.GrayColorGradient_getClassName(self)

    def f(self, x):
        return _cp4vasp.GrayColorGradient_f(self, x)

    def __init__(self):
        _cp4vasp.GrayColorGradient_swiginit(self, _cp4vasp.new_GrayColorGradient())
    __swig_destroy__ = _cp4vasp.delete_GrayColorGradient

# Register GrayColorGradient in _cp4vasp:
_cp4vasp.GrayColorGradient_swigregister(GrayColorGradient)

class RainbowColorGradient(ColorGradient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    saturation = property(_cp4vasp.RainbowColorGradient_saturation_get, _cp4vasp.RainbowColorGradient_saturation_set)
    value = property(_cp4vasp.RainbowColorGradient_value_get, _cp4vasp.RainbowColorGradient_value_set)

    def __init__(self, saturation=1.0, value=1.0):
        _cp4vasp.RainbowColorGradient_swiginit(self, _cp4vasp.new_RainbowColorGradient(saturation, value))

    def getClassName(self):
        return _cp4vasp.RainbowColorGradient_getClassName(self)

    def f(self, x):
        return _cp4vasp.RainbowColorGradient_f(self, x)
    __swig_destroy__ = _cp4vasp.delete_RainbowColorGradient

# Register RainbowColorGradient in _cp4vasp:
_cp4vasp.RainbowColorGradient_swigregister(RainbowColorGradient)

class VisSlideDrawer(VisDrawer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n1 = property(_cp4vasp.VisSlideDrawer_n1_get, _cp4vasp.VisSlideDrawer_n1_set)
    n2 = property(_cp4vasp.VisSlideDrawer_n2_get, _cp4vasp.VisSlideDrawer_n2_set)
    lo = property(_cp4vasp.VisSlideDrawer_lo_get, _cp4vasp.VisSlideDrawer_lo_set)
    hi = property(_cp4vasp.VisSlideDrawer_hi_get, _cp4vasp.VisSlideDrawer_hi_set)
    scale = property(_cp4vasp.VisSlideDrawer_scale_get, _cp4vasp.VisSlideDrawer_scale_set)

    def __init__(self):
        _cp4vasp.VisSlideDrawer_swiginit(self, _cp4vasp.new_VisSlideDrawer())

    def setShadow(self, f):
        return _cp4vasp.VisSlideDrawer_setShadow(self, f)

    def getShadow(self):
        return _cp4vasp.VisSlideDrawer_getShadow(self)

    def setB1(self, b):
        return _cp4vasp.VisSlideDrawer_setB1(self, b)

    def setB2(self, b):
        return _cp4vasp.VisSlideDrawer_setB2(self, b)

    def setOrigin(self, b):
        return _cp4vasp.VisSlideDrawer_setOrigin(self, b)

    def setFArray(self, fa):
        return _cp4vasp.VisSlideDrawer_setFArray(self, fa)

    def setGradient(self, g):
        return _cp4vasp.VisSlideDrawer_setGradient(self, g)

    def setClamp(self, c):
        return _cp4vasp.VisSlideDrawer_setClamp(self, c)

    def assureClampAndGradient(self):
        return _cp4vasp.VisSlideDrawer_assureClampAndGradient(self)
    __swig_destroy__ = _cp4vasp.delete_VisSlideDrawer

# Register VisSlideDrawer in _cp4vasp:
_cp4vasp.VisSlideDrawer_swigregister(VisSlideDrawer)

class VisStructureArrowsDrawer(VisDrawer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    arrow_radius = property(_cp4vasp.VisStructureArrowsDrawer_arrow_radius_get, _cp4vasp.VisStructureArrowsDrawer_arrow_radius_set)
    arrowhead_radius = property(_cp4vasp.VisStructureArrowsDrawer_arrowhead_radius_get, _cp4vasp.VisStructureArrowsDrawer_arrowhead_radius_set)
    arrowhead_length = property(_cp4vasp.VisStructureArrowsDrawer_arrowhead_length_get, _cp4vasp.VisStructureArrowsDrawer_arrowhead_length_set)
    red = property(_cp4vasp.VisStructureArrowsDrawer_red_get, _cp4vasp.VisStructureArrowsDrawer_red_set)
    green = property(_cp4vasp.VisStructureArrowsDrawer_green_get, _cp4vasp.VisStructureArrowsDrawer_green_set)
    blue = property(_cp4vasp.VisStructureArrowsDrawer_blue_get, _cp4vasp.VisStructureArrowsDrawer_blue_set)
    arrows_scale = property(_cp4vasp.VisStructureArrowsDrawer_arrows_scale_get, _cp4vasp.VisStructureArrowsDrawer_arrows_scale_set)

    def __init__(self, sd):
        _cp4vasp.VisStructureArrowsDrawer_swiginit(self, _cp4vasp.new_VisStructureArrowsDrawer(sd))

    def getClassName(self):
        return _cp4vasp.VisStructureArrowsDrawer_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_VisStructureArrowsDrawer

    def updateStructure(self):
        return _cp4vasp.VisStructureArrowsDrawer_updateStructure(self)

    def len(self):
        return _cp4vasp.VisStructureArrowsDrawer_len(self)

    def getArrow(self, i):
        return _cp4vasp.VisStructureArrowsDrawer_getArrow(self, i)

    def setArrow(self, i, x, y, z):
        return _cp4vasp.VisStructureArrowsDrawer_setArrow(self, i, x, y, z)

    def setScale(self, s):
        return _cp4vasp.VisStructureArrowsDrawer_setScale(self, s)

    def getScale(self):
        return _cp4vasp.VisStructureArrowsDrawer_getScale(self)

# Register VisStructureArrowsDrawer in _cp4vasp:
_cp4vasp.VisStructureArrowsDrawer_swigregister(VisStructureArrowsDrawer)

class VisIsosurfaceDrawer(VisDrawer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    list = property(_cp4vasp.VisIsosurfaceDrawer_list_get, _cp4vasp.VisIsosurfaceDrawer_list_set)
    list_update_required = property(_cp4vasp.VisIsosurfaceDrawer_list_update_required_get, _cp4vasp.VisIsosurfaceDrawer_list_update_required_set)
    level = property(_cp4vasp.VisIsosurfaceDrawer_level_get, _cp4vasp.VisIsosurfaceDrawer_level_set)
    draw_as_points = property(_cp4vasp.VisIsosurfaceDrawer_draw_as_points_get, _cp4vasp.VisIsosurfaceDrawer_draw_as_points_set)
    mx = property(_cp4vasp.VisIsosurfaceDrawer_mx_get, _cp4vasp.VisIsosurfaceDrawer_mx_set)
    my = property(_cp4vasp.VisIsosurfaceDrawer_my_get, _cp4vasp.VisIsosurfaceDrawer_my_set)
    mz = property(_cp4vasp.VisIsosurfaceDrawer_mz_get, _cp4vasp.VisIsosurfaceDrawer_mz_set)
    chgcar = property(_cp4vasp.VisIsosurfaceDrawer_chgcar_get, _cp4vasp.VisIsosurfaceDrawer_chgcar_set)

    def paint_isosurface(self, c, level):
        return _cp4vasp.VisIsosurfaceDrawer_paint_isosurface(self, c, level)

    def handle_tetrahedron(self, c, a1, a2, a3, b1, b2, b3, c1, c2, c3, d1, d2, d3, level):
        return _cp4vasp.VisIsosurfaceDrawer_handle_tetrahedron(self, c, a1, a2, a3, b1, b2, b3, c1, c2, c3, d1, d2, d3, level)

    def handle_type1(self, va, vb, vc, vd, nA, nB, nC, nD, A, B, C, D):
        return _cp4vasp.VisIsosurfaceDrawer_handle_type1(self, va, vb, vc, vd, nA, nB, nC, nD, A, B, C, D)

    def handle_type2(self, va, vb, vc, vd, nA, nB, nC, nD, A, B, C, D):
        return _cp4vasp.VisIsosurfaceDrawer_handle_type2(self, va, vb, vc, vd, nA, nB, nC, nD, A, B, C, D)
    red = property(_cp4vasp.VisIsosurfaceDrawer_red_get, _cp4vasp.VisIsosurfaceDrawer_red_set)
    green = property(_cp4vasp.VisIsosurfaceDrawer_green_get, _cp4vasp.VisIsosurfaceDrawer_green_set)
    blue = property(_cp4vasp.VisIsosurfaceDrawer_blue_get, _cp4vasp.VisIsosurfaceDrawer_blue_set)

    def __init__(self):
        _cp4vasp.VisIsosurfaceDrawer_swiginit(self, _cp4vasp.new_VisIsosurfaceDrawer())

    def getClassName(self):
        return _cp4vasp.VisIsosurfaceDrawer_getClassName(self)

    def setMultiple(self, a, b, c):
        return _cp4vasp.VisIsosurfaceDrawer_setMultiple(self, a, b, c)

    def setMultiple1(self, a):
        return _cp4vasp.VisIsosurfaceDrawer_setMultiple1(self, a)

    def setMultiple2(self, a):
        return _cp4vasp.VisIsosurfaceDrawer_setMultiple2(self, a)

    def setMultiple3(self, a):
        return _cp4vasp.VisIsosurfaceDrawer_setMultiple3(self, a)

    def getMultiple1(self):
        return _cp4vasp.VisIsosurfaceDrawer_getMultiple1(self)

    def getMultiple2(self):
        return _cp4vasp.VisIsosurfaceDrawer_getMultiple2(self)

    def getMultiple3(self):
        return _cp4vasp.VisIsosurfaceDrawer_getMultiple3(self)

    def updateIsosurface(self):
        return _cp4vasp.VisIsosurfaceDrawer_updateIsosurface(self)

    def setLevel(self, l):
        return _cp4vasp.VisIsosurfaceDrawer_setLevel(self, l)

    def setChgcar(self, c):
        return _cp4vasp.VisIsosurfaceDrawer_setChgcar(self, c)

    def getLevel(self):
        return _cp4vasp.VisIsosurfaceDrawer_getLevel(self)

    def getDrawAsPoints(self):
        return _cp4vasp.VisIsosurfaceDrawer_getDrawAsPoints(self)

    def setDrawAsPoints(self, b):
        return _cp4vasp.VisIsosurfaceDrawer_setDrawAsPoints(self, b)
    __swig_destroy__ = _cp4vasp.delete_VisIsosurfaceDrawer

# Register VisIsosurfaceDrawer in _cp4vasp:
_cp4vasp.VisIsosurfaceDrawer_swigregister(VisIsosurfaceDrawer)


def ODP_parseString(src):
    return _cp4vasp.ODP_parseString(src)

def ODP_parseFile(path):
    return _cp4vasp.ODP_parseFile(path)
class ODPNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    doc = property(_cp4vasp.ODPNode_doc_get, _cp4vasp.ODPNode_doc_set)
    pos = property(_cp4vasp.ODPNode_pos_get, _cp4vasp.ODPNode_pos_set)

    def __init__(self, node):
        _cp4vasp.ODPNode_swiginit(self, _cp4vasp.new_ODPNode(node))
    ELEMENT_NODE = _cp4vasp.ODPNode_ELEMENT_NODE
    ATTRIBUTE_NODE = _cp4vasp.ODPNode_ATTRIBUTE_NODE
    TEXT_NODE = _cp4vasp.ODPNode_TEXT_NODE
    CDATA_SECTION_NODE = _cp4vasp.ODPNode_CDATA_SECTION_NODE
    ENTITY_REFERENCE_NODE = _cp4vasp.ODPNode_ENTITY_REFERENCE_NODE
    ENTITY_NODE = _cp4vasp.ODPNode_ENTITY_NODE
    PROCESSING_INSTRUCTION_NODE = _cp4vasp.ODPNode_PROCESSING_INSTRUCTION_NODE
    COMMENT_NODE = _cp4vasp.ODPNode_COMMENT_NODE
    DOCUMENT_NODE = _cp4vasp.ODPNode_DOCUMENT_NODE
    DOCUMENT_TYPE_NODE = _cp4vasp.ODPNode_DOCUMENT_TYPE_NODE
    DOCUMENT_FRAGMENT_NODE = _cp4vasp.ODPNode_DOCUMENT_FRAGMENT_NODE
    NOTATION_NODE = _cp4vasp.ODPNode_NOTATION_NODE

    def getNodeName(self):
        return _cp4vasp.ODPNode_getNodeName(self)

    def getNodeValue(self):
        return _cp4vasp.ODPNode_getNodeValue(self)

    def setNodeValue(self, v):
        return _cp4vasp.ODPNode_setNodeValue(self, v)

    def getNodeType(self):
        return _cp4vasp.ODPNode_getNodeType(self)

    def getParentNode(self):
        return _cp4vasp.ODPNode_getParentNode(self)

    def getChildNodes(self):
        return _cp4vasp.ODPNode_getChildNodes(self)

    def getFirstChild(self):
        return _cp4vasp.ODPNode_getFirstChild(self)

    def getLastChild(self):
        return _cp4vasp.ODPNode_getLastChild(self)

    def getPreviousSibling(self):
        return _cp4vasp.ODPNode_getPreviousSibling(self)

    def getNextSibling(self):
        return _cp4vasp.ODPNode_getNextSibling(self)

    def getAttributes(self):
        return _cp4vasp.ODPNode_getAttributes(self)

    def getOwnerDocument(self):
        return _cp4vasp.ODPNode_getOwnerDocument(self)

    def hasChildNodes(self):
        return _cp4vasp.ODPNode_hasChildNodes(self)

    def up(self):
        return _cp4vasp.ODPNode_up(self)

    def down(self):
        return _cp4vasp.ODPNode_down(self)

    def next(self):
        return _cp4vasp.ODPNode_next(self)

    def previous(self):
        return _cp4vasp.ODPNode_previous(self)

    def poschar(self):
        return _cp4vasp.ODPNode_poschar(self)
    __swig_destroy__ = _cp4vasp.delete_ODPNode

# Register ODPNode in _cp4vasp:
_cp4vasp.ODPNode_swigregister(ODPNode)

class ODPDOMImplementation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def hasFeature(self, feature, version):
        return _cp4vasp.ODPDOMImplementation_hasFeature(self, feature, version)

    def __init__(self):
        _cp4vasp.ODPDOMImplementation_swiginit(self, _cp4vasp.new_ODPDOMImplementation())
    __swig_destroy__ = _cp4vasp.delete_ODPDOMImplementation

# Register ODPDOMImplementation in _cp4vasp:
_cp4vasp.ODPDOMImplementation_swigregister(ODPDOMImplementation)

class ODPDocument(ODPNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getDoctype(self):
        return _cp4vasp.ODPDocument_getDoctype(self)

    def getImplementation(self):
        return _cp4vasp.ODPDocument_getImplementation(self)

    def getDocumentElement(self):
        return _cp4vasp.ODPDocument_getDocumentElement(self)

    def createElement(self, tagName):
        return _cp4vasp.ODPDocument_createElement(self, tagName)

    def createDocumentFragment(self):
        return _cp4vasp.ODPDocument_createDocumentFragment(self)

    def createTextNode(self, data):
        return _cp4vasp.ODPDocument_createTextNode(self, data)

    def createComment(self, data):
        return _cp4vasp.ODPDocument_createComment(self, data)

    def createCDATASection(self, data):
        return _cp4vasp.ODPDocument_createCDATASection(self, data)

    def createProcessingInstruction(self, target, data):
        return _cp4vasp.ODPDocument_createProcessingInstruction(self, target, data)

    def createAttribute(self, name):
        return _cp4vasp.ODPDocument_createAttribute(self, name)

    def createEntityReference(self, name):
        return _cp4vasp.ODPDocument_createEntityReference(self, name)

    def getElementsByTagName(self, tagname):
        return _cp4vasp.ODPDocument_getElementsByTagName(self, tagname)
    __swig_destroy__ = _cp4vasp.delete_ODPDocument

# Register ODPDocument in _cp4vasp:
_cp4vasp.ODPDocument_swigregister(ODPDocument)

class ODPDocumentParent(ODPDocument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cp4vasp.delete_ODPDocumentParent

# Register ODPDocumentParent in _cp4vasp:
_cp4vasp.ODPDocumentParent_swigregister(ODPDocumentParent)

class ODPElement(ODPNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node):
        _cp4vasp.ODPElement_swiginit(self, _cp4vasp.new_ODPElement(node))

    def getTagName(self):
        return _cp4vasp.ODPElement_getTagName(self)

    def getAttribute(self, name):
        return _cp4vasp.ODPElement_getAttribute(self, name)

    def setAttribute(self, name, value):
        return _cp4vasp.ODPElement_setAttribute(self, name, value)

    def removeAttribute(self, name):
        return _cp4vasp.ODPElement_removeAttribute(self, name)

    def getAttributeNode(self, name):
        return _cp4vasp.ODPElement_getAttributeNode(self, name)

    def setAttributeNode(self, newAttr):
        return _cp4vasp.ODPElement_setAttributeNode(self, newAttr)

    def removeAttributeNode(self, oldAttr):
        return _cp4vasp.ODPElement_removeAttributeNode(self, oldAttr)

    def getElementsByTagName(self, name):
        return _cp4vasp.ODPElement_getElementsByTagName(self, name)

    def normalize(self):
        return _cp4vasp.ODPElement_normalize(self)

    def refreshAttr(self):
        return _cp4vasp.ODPElement_refreshAttr(self)
    __swig_destroy__ = _cp4vasp.delete_ODPElement

# Register ODPElement in _cp4vasp:
_cp4vasp.ODPElement_swigregister(ODPElement)

class ODPCharacterData(ODPNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getData(self):
        return _cp4vasp.ODPCharacterData_getData(self)

    def setData(self, s):
        return _cp4vasp.ODPCharacterData_setData(self, s)

    def __init__(self, node):
        _cp4vasp.ODPCharacterData_swiginit(self, _cp4vasp.new_ODPCharacterData(node))

    def getLength(self):
        return _cp4vasp.ODPCharacterData_getLength(self)

    def substringData(self, offset, count):
        return _cp4vasp.ODPCharacterData_substringData(self, offset, count)

    def appendData(self, arg):
        return _cp4vasp.ODPCharacterData_appendData(self, arg)

    def insertData(self, offset, arg):
        return _cp4vasp.ODPCharacterData_insertData(self, offset, arg)

    def deleteData(self, offset, count):
        return _cp4vasp.ODPCharacterData_deleteData(self, offset, count)

    def replaceData(self, offset, count, arg):
        return _cp4vasp.ODPCharacterData_replaceData(self, offset, count, arg)
    __swig_destroy__ = _cp4vasp.delete_ODPCharacterData

# Register ODPCharacterData in _cp4vasp:
_cp4vasp.ODPCharacterData_swigregister(ODPCharacterData)

class ODPText(ODPCharacterData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node):
        _cp4vasp.ODPText_swiginit(self, _cp4vasp.new_ODPText(node))

    def splitText(self, offset):
        return _cp4vasp.ODPText_splitText(self, offset)
    __swig_destroy__ = _cp4vasp.delete_ODPText

# Register ODPText in _cp4vasp:
_cp4vasp.ODPText_swigregister(ODPText)

class ODPComment(ODPCharacterData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node):
        _cp4vasp.ODPComment_swiginit(self, _cp4vasp.new_ODPComment(node))
    __swig_destroy__ = _cp4vasp.delete_ODPComment

# Register ODPComment in _cp4vasp:
_cp4vasp.ODPComment_swigregister(ODPComment)

class ODPCDATASection(ODPText):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node):
        _cp4vasp.ODPCDATASection_swiginit(self, _cp4vasp.new_ODPCDATASection(node))
    __swig_destroy__ = _cp4vasp.delete_ODPCDATASection

# Register ODPCDATASection in _cp4vasp:
_cp4vasp.ODPCDATASection_swigregister(ODPCDATASection)

class ODPNodeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def item(self, index):
        return _cp4vasp.ODPNodeList_item(self, index)

    def getLength(self):
        return _cp4vasp.ODPNodeList_getLength(self)

    def __init__(self):
        _cp4vasp.ODPNodeList_swiginit(self, _cp4vasp.new_ODPNodeList())
    __swig_destroy__ = _cp4vasp.delete_ODPNodeList

# Register ODPNodeList in _cp4vasp:
_cp4vasp.ODPNodeList_swigregister(ODPNodeList)

class ODPChildList(ODPNodeList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node):
        _cp4vasp.ODPChildList_swiginit(self, _cp4vasp.new_ODPChildList(node))

    def item(self, index):
        return _cp4vasp.ODPChildList_item(self, index)

    def getLength(self):
        return _cp4vasp.ODPChildList_getLength(self)
    __swig_destroy__ = _cp4vasp.delete_ODPChildList

# Register ODPChildList in _cp4vasp:
_cp4vasp.ODPChildList_swigregister(ODPChildList)

class ODPElementsByTagNameList(ODPNodeList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node, tag):
        _cp4vasp.ODPElementsByTagNameList_swiginit(self, _cp4vasp.new_ODPElementsByTagNameList(node, tag))
    __swig_destroy__ = _cp4vasp.delete_ODPElementsByTagNameList

    def item(self, index):
        return _cp4vasp.ODPElementsByTagNameList_item(self, index)

    def getLength(self):
        return _cp4vasp.ODPElementsByTagNameList_getLength(self)

# Register ODPElementsByTagNameList in _cp4vasp:
_cp4vasp.ODPElementsByTagNameList_swigregister(ODPElementsByTagNameList)

class ODPChildrenByTagNameList(ODPNodeList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node, tag):
        _cp4vasp.ODPChildrenByTagNameList_swiginit(self, _cp4vasp.new_ODPChildrenByTagNameList(node, tag))
    __swig_destroy__ = _cp4vasp.delete_ODPChildrenByTagNameList

    def item(self, index):
        return _cp4vasp.ODPChildrenByTagNameList_item(self, index)

    def getLength(self):
        return _cp4vasp.ODPChildrenByTagNameList_getLength(self)

# Register ODPChildrenByTagNameList in _cp4vasp:
_cp4vasp.ODPChildrenByTagNameList_swigregister(ODPChildrenByTagNameList)

class ODPNamedNodeMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getNamedItem(self, name):
        return _cp4vasp.ODPNamedNodeMap_getNamedItem(self, name)

    def setNamedItem(self, arg):
        return _cp4vasp.ODPNamedNodeMap_setNamedItem(self, arg)

    def removeNamedItem(self, name):
        return _cp4vasp.ODPNamedNodeMap_removeNamedItem(self, name)

    def item(self, index):
        return _cp4vasp.ODPNamedNodeMap_item(self, index)

    def getLength(self):
        return _cp4vasp.ODPNamedNodeMap_getLength(self)

    def __init__(self):
        _cp4vasp.ODPNamedNodeMap_swiginit(self, _cp4vasp.new_ODPNamedNodeMap())
    __swig_destroy__ = _cp4vasp.delete_ODPNamedNodeMap

# Register ODPNamedNodeMap in _cp4vasp:
_cp4vasp.ODPNamedNodeMap_swigregister(ODPNamedNodeMap)

class ODPAttributeMap(ODPNamedNodeMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node):
        _cp4vasp.ODPAttributeMap_swiginit(self, _cp4vasp.new_ODPAttributeMap(node))

    def setNode(self, node):
        return _cp4vasp.ODPAttributeMap_setNode(self, node)

    def getAttribute(self, name):
        return _cp4vasp.ODPAttributeMap_getAttribute(self, name)

    def getNamedItem(self, name):
        return _cp4vasp.ODPAttributeMap_getNamedItem(self, name)

    def item(self, index):
        return _cp4vasp.ODPAttributeMap_item(self, index)

    def getLength(self):
        return _cp4vasp.ODPAttributeMap_getLength(self)
    __swig_destroy__ = _cp4vasp.delete_ODPAttributeMap

# Register ODPAttributeMap in _cp4vasp:
_cp4vasp.ODPAttributeMap_swigregister(ODPAttributeMap)

class ODPAttr(ODPNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node):
        _cp4vasp.ODPAttr_swiginit(self, _cp4vasp.new_ODPAttr(node))

    def getName(self):
        return _cp4vasp.ODPAttr_getName(self)

    def getSpecified(self):
        return _cp4vasp.ODPAttr_getSpecified(self)

    def getValue(self):
        return _cp4vasp.ODPAttr_getValue(self)

    def setValue(self, s):
        return _cp4vasp.ODPAttr_setValue(self, s)
    __swig_destroy__ = _cp4vasp.delete_ODPAttr

# Register ODPAttr in _cp4vasp:
_cp4vasp.ODPAttr_swigregister(ODPAttr)



